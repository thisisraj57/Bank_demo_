**Class:** BookController

**Purpose:** A controller class for managing books in a library management system.

**Annotations:**

* **@RestController:** Indicates that this class is a REST controller.
* **@RequestMapping("/books"):** Specifies the base URI for all the endpoints in this controller.

**Autowired Fields:**

* **bookService:** The BookService instance used to perform CRUD operations on books.

**Methods:**

* **getAllBooks:** Retrieves a list of all books.
* **getBookById:** Retrieves a book by its ID.
* **createBook:** Creates a new book.
* **updateBook:** Updates an existing book.
* **deleteBook:** Deletes a book by its ID.

**Example:**

```java
@RestController
@RequestMapping("/books")
public class BookController {

    @Autowired
    private BookService bookService;

    @GetMapping
    public List<Book> getAllBooks() {
        return bookService.getAllBooks();
    }

    @GetMapping("/{id}")
    public Book getBookById(@PathVariable Long id) {
        return bookService.getBookById(id);
    }

    @PostMapping
    public Book createBook(@RequestBody Book book) {
        return bookService.createBook(book);
    }

    @PutMapping("/{id}")
    public Book updateBook(@PathVariable Long id, @RequestBody Book book) {
        return bookService.updateBook(id, book);
    }

    @DeleteMapping("/{id}")
    public void deleteBook(@PathVariable Long id) {
        bookService.deleteBook(id);
    }
}
```

This code defines a REST controller for managing books. The controller uses the BookService to perform CRUD operations on books. The controller is annotated with @RestController, which indicates that it is a REST controller, and @RequestMapping("/books"), which specifies the base URI for all the endpoints in this controller.

The controller has five methods:

* **getAllBooks:** Retrieves a list of all books.
* **getBookById:** Retrieves a book by its ID.
* **createBook:** Creates a new book.
* **updateBook:** Updates an existing book.
* **deleteBook:** Deletes a book by its ID.

Each method is annotated with the appropriate HTTP method annotation (e.g., @GetMapping, @PostMapping, @PutMapping, @DeleteMapping) and uses the BookService to perform the corresponding operation on books.