# Prime Number Check in Python

## Overview

This documentation provides an explanation of the Python code that defines a function to check if a given number is a prime number. The code includes a function `is_prime` and an example usage to demonstrate its functionality.

## Function Definition

### `is_prime(number)`

#### Description

The `is_prime` function checks if a given number is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.

#### Parameters

- `number` (int): The number to check for primality.

#### Returns

- `bool`: Returns `True` if the number is prime, `False` otherwise.

#### Implementation

```python
def is_prime(number):
    """
    Check if a number is a prime number.

    :param number: The number to check.
    :return: True if the number is prime, False otherwise.
    """
    if number <= 1:
        return False
    for i in range(2, int(number ** 0.5) + 1):
        if number % i == 0:
            return False
    return True
```

### Explanation

1. **Initial Check**: The function first checks if the number is less than or equal to 1. If so, it returns `False` because prime numbers are greater than 1.
2. **Loop Through Possible Divisors**: The function then loops from 2 to the square root of the number (inclusive). This is because any larger factor of the number would have a corresponding smaller factor that has already been checked.
3. **Check for Divisibility**: Within the loop, the function checks if the number is divisible by any of these values. If it is, the function returns `False` because the number is not prime.
4. **Return True**: If no divisors are found, the function returns `True`, indicating that the number is prime.

## Example Usage

The following example demonstrates how to use the `is_prime` function to check if a number is prime.

```python
if __name__ == "__main__":
    num = 29
    if is_prime(num):
        print(f"{num} is a prime number.")
    else:
        print(f"{num} is not a prime number.")
```

### Explanation

1. **Main Block**: The code within the `if __name__ == "__main__":` block will only execute if the script is run directly (not imported as a module).
2. **Check Primality**: The variable `num` is assigned the value 29. The `is_prime` function is called with `num` as the argument.
3. **Print Result**: Based on the return value of `is_prime`, the code prints whether the number is a prime number or not.

## Conclusion

This documentation provides a detailed explanation of the `is_prime` function and its usage. The function efficiently checks for prime numbers by iterating up to the square root of the given number and checking for divisibility. The example usage demonstrates how to use the function to check if a specific number is prime.