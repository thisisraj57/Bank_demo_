```java
// The @RestController annotation is used to mark a class as a REST controller.
// The @Autowired annotation is used to inject a dependency into a bean.
@RestController
@RequestMapping("/reviews")
public class ReviewController {

    // The @Autowired annotation is used to inject an instance of the ReviewRepository interface into the reviewRepository field.
    @Autowired
    private ReviewRepository reviewRepository;

    // The @PostMapping annotation is used to map a POST request to a method.
    // The @RequestBody annotation is used to bind the request body to a method parameter.
    @PostMapping
    public Review createReview(@RequestBody Review review) {
        // The reviewRepository.save() method is used to save the Review object to the database.
        return reviewRepository.save(review);
    }

    // The @GetMapping annotation is used to map a GET request to a method.
    @GetMapping
    public List<Review> getAllReviews() {
        // The reviewRepository.findAll() method is used to retrieve all Review objects from the database.
        return reviewRepository.findAll();
    }

    // The @GetMapping annotation is used to map a GET request to a method.
    // The @PathVariable annotation is used to bind a path variable to a method parameter.
    @GetMapping("/{id}")
    public Review getReviewById(@PathVariable Long id) {
        // The reviewRepository.findById() method is used to retrieve a Review object from the database by its ID.
        // The .orElseThrow() method is used to throw a ResourceNotFoundException if the Review object is not found.
        return reviewRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("Review not found with id :" + id));
    }

    // The @PutMapping annotation is used to map a PUT request to a method.
    // The @PathVariable annotation is used to bind a path variable to a method parameter.
    // The @RequestBody annotation is used to bind the request body to a method parameter.
    @PutMapping("/{id}")
    public Review updateReview(@PathVariable Long id, @RequestBody Review review) {
        // The reviewRepository.findById() method is used to retrieve a Review object from the database by its ID.
        // The .orElseThrow() method is used to throw a ResourceNotFoundException if the Review object is not found.
        Review existingReview = reviewRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("Review not found with id :" + id));
        // The existingReview object is updated with the values from the review object.
        existingReview.setReviewText(review.getReviewText());
        existingReview.setRating(review.getRating());
        existingReview.setBookId(review.getBookId());
        // The reviewRepository.save() method is used to update the Review object in the database.
        return reviewRepository.save(existingReview);
    }

    // The @DeleteMapping annotation is used to map a DELETE request to a method.
    // The @PathVariable annotation is used to bind a path variable to a method parameter.
    @DeleteMapping("/{id}")
    public void deleteReview(@PathVariable Long id) {
        // The reviewRepository.deleteById() method is used to delete a Review object from the database by its ID.
        reviewRepository.deleteById(id);
    }
}
```

This code defines a REST controller for managing reviews. The `@RestController` annotation is used to mark the class as a REST controller. The `@Autowired` annotation is used to inject an instance of the ReviewRepository interface into the `reviewRepository` field.

The class contains five methods:

- The `createReview()` method is used to create a new review. It maps a POST request to the `/reviews` endpoint. The method takes a Review object as a request body and uses the `reviewRepository.save()` method to save it to the database. The method returns the saved Review object.
- The `getAllReviews()` method is used to retrieve all reviews. It maps a GET request to the `/reviews` endpoint. The method uses the `reviewRepository.findAll()` method to retrieve all Review objects from the database. The method returns a list of Review objects.
- The `getReviewById()` method is used to retrieve a review by its ID. It maps a GET request to the `/reviews/{id}` endpoint. The method takes a path variable named `id` and uses the `reviewRepository.findById()` method to retrieve the Review object from the database. If the Review object is not found, the method throws a ResourceNotFoundException. The method returns the retrieved Review object.
- The `updateReview()` method is used to update a review. It maps a PUT request to the `/reviews/{id}` endpoint. The method takes a path variable named `id` and a Review object as a request body. The method uses the `reviewRepository.findById()` method to retrieve the Review object from the database. If the Review object is not found, the method throws a ResourceNotFoundException. The method updates the existing Review object with the values from the request body and uses the `reviewRepository.save()` method to update it in the database. The method returns the updated Review object.
- The `deleteReview()` method is used to delete a review. It maps a DELETE request to the `/reviews/{id}` endpoint. The method takes a path variable named `id`. The method uses the `reviewRepository.deleteById()` method to delete the Review object from the database.